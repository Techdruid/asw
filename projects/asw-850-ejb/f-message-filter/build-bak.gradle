/* 
 * Gradle build file per un'applicazione EJB multi-progetto, 
 * con la definizione di un servizio (interfaccia remota), 
 * un'implementazione e un client (application client). 
 * 
 * - gradle build compila, crea i jar e prepara la distribuzione 
 * - gradle clean cancella i jar file e la distribuzione 
 */ 
 
apply plugin: 'eclipse'

/* definisce il nome dell'enterprise bean */ 
ext.beanName = 'message-filter-ejb'

/* progetti i cui jar che devono essere rilasciati lato server o client */ 
def serverSideProjects = [':message-filter-bean', ':asw-util', ':asw-jms']
def clientSideProjects = [':message-producer', ':message-consumer', ':asw-util', ':asw-jms']

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'

    repositories {
       mavenCentral()
    }

    dependencies {
        testCompile 'junit:junit:4.12'
    }

    version = '1.0'
}

project(':asw-util') {
}

project(':asw-jms') {
    dependencies {
        compile project(':asw-util')
        compile 'javax.jms:javax.jms-api:2.0.1'
    }
    jar {
        manifest {
            attributes 'Class-Path': 'asw-util.jar' 
        }
    }    
}

project(':message-producer') {
    dependencies {
        compile project(':asw-util')
        compile project(':asw-jms')
        compile 'javax.jms:javax.jms-api:2.0.1'
    }
    jar {
        manifest {
            attributes 'Main-Class': 'asw.ejb.messagefilter.producer.Main'
            attributes 'Class-Path': 'asw-util.jar asw-jms.jar' 
        }
    }
}

project(':message-consumer') {
    dependencies {
        compile project(':asw-util')
        compile project(':asw-jms')
        compile 'javax.jms:javax.jms-api:2.0.1'
    }
    jar {
        manifest {
            attributes 'Main-Class': 'asw.ejb.messagefilter.consumer.Main'
            attributes 'Class-Path': 'asw-util.jar asw-jms.jar' 
        }
    }
}

project(':message-filter-bean') {
    dependencies {
        compile project(':asw-util')
        compile project(':asw-jms')
        compile 'javax.jms:javax.jms-api:2.0.1'
        compile 'javax.ejb:javax.ejb-api:3.2'        
    }

    jar {
        baseName = beanName  
        manifest {
            attributes 'Class-Path': 'asw-util.jar asw-jms.jar' 
        }    
    }
}

/* 
 * DISTRIBUZIONE - SERVER 
 */ 

// copia nella cartella dist/server tutti i file di interesse  

task copyServerJarFiles(type: Copy, dependsOn: subprojects.build) {
    serverSideProjects.collect {
        project(it) { subproject -> 
            from subproject.buildDir  
            include 'libs/**'
            rename { String fileName ->
                fileName.replace("-${subproject.version}", "")
            }
        }
        into 'dist/server'
    }
}

task copyServerScripts(type: Copy) {
    from 'scripts/server' 
    into 'dist/server'
}

task copyServerResources(type: Copy) {
    from 'resources/server' 
    into 'dist/server'
}

task serverDist(dependsOn: [copyServerJarFiles, copyServerScripts, copyServerResources]) {
}

/* 
 * DISTRIBUZIONE - CLIENT 
 */ 

// copia nella cartella dist/client tutti i file di interesse  

task copyClientJarFiles(type: Copy, dependsOn: subprojects.build) {
    clientSideProjects.collect {
        project(it) { subproject -> 
            from subproject.buildDir  
            include 'libs/**'
            rename { String fileName ->
                fileName.replace("-${subproject.version}", "")
            }
        }
        into 'dist/client'
    }
}

task copyClientScripts(type: Copy) {
    from 'scripts/client' 
    into 'dist/client'
}

task copyClientResources(type: Copy) {
    from 'resources/client' 
    into 'dist/client'
}

task clientDist(dependsOn: [copyClientJarFiles, copyClientScripts, copyClientResources]) {
}


/* 
 * DISTRIBUZIONE e BUILD 
 */ 

task dist(dependsOn: [serverDist, clientDist]) {
}

task build(dependsOn: dist) {
}


/*
 * CLEAN 
 * necessario perché il progetto principale non è un progetto Java 
 */ 

task deleteDist(type: Delete) {
    def dirName = "dist"
    delete dirName
}

task clean(dependsOn: deleteDist) {
}

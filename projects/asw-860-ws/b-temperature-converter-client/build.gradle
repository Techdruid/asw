/* 
 * Gradle build file per un'applicazione basata su WS SOAP, 
 * con la definizione di client per un web service. 
 * 
 * - gradle build compila, crea i jar e prepara la distribuzione 
 * - gradle clean cancella i jar file e la distribuzione 
 */ 

/* il web service da consumare */ 
ext.wsName = 'temp-convert-ws'
ext.wsUrl = 'http://www.w3schools.com/xml/tempconvert.asmx?WSDL'
ext.wsPackage = 'com.w3schools.tempconvert.endpoint'

/* definisce il nome del client e della sua main class */ 
ext.appName = wsName + '-client'
ext.mainClass = 'asw.ws.tempconvert.client.Main'


/* progetti i cui jar che devono essere rilasciati lato server o client */ 
def clientSideProjects = [':ws-client', ':generated-ws-client']

subprojects {
    apply plugin: 'java'

    repositories {
        flatDir { 
           dirs "../../../libraries"
        }
        mavenCentral()
    }

    configurations {
        libs
    }

    dependencies {
        testCompile 'junit:junit:4.12'
    }
}

project(':generated-ws-client') {
    configurations {
        jaxws
    }
    dependencies {
        jaxws 'com.sun.xml.ws:jaxws-tools:2.2.10'
    }
    /* simula il comando wsimport -s ${DB}/src/main/java -d ${DB}/build/classes/main -p ${PACKAGE} -keep ${WSDL_URL} */
    task wsimport {
        ext.destDir = file("${projectDir}/src/main/java")
        doFirst {
            /* crea la cartella per il progetto (altrimenti qualcosa in doLast fallisce) */
            sourceSets.main.java.srcDirs[0].mkdirs()
        }
        doLast {
            ant {
                sourceSets.main.output.classesDir.mkdirs()
                destDir.mkdirs()
                taskdef(name: 'wsimport',
                        classname: 'com.sun.tools.ws.ant.WsImport',
                        classpath: configurations.jaxws.asPath
                )
                wsimport(keep: true,
                        destdir: sourceSets.main.output.classesDir,
                        sourcedestdir: destDir,
                        extension: "true",
                        verbose: "false",
                        quiet: "false",
                        package: wsPackage,
                        xnocompile: "true",
                        wsdl: wsUrl) {
                    xjcarg(value: "-XautoNameResolution")
                }
            }
        }
    }    
    compileJava {
        dependsOn wsimport
        source wsimport.destDir
    }
    
    jar {
        baseName = wsName + '-generated-client' 
    }
}

project(':ws-client') {
    dependencies {
        compile 'asw:asw-util:latest'
        compile project(':generated-ws-client')

        libs 'asw:asw-util:latest'
    }
    
    jar {
        baseName = appName 
        manifest {
            attributes 'Main-Class': mainClass
            attributes 'Class-Path': 'asw-util.jar ' + wsName + '-generated-client.jar' 
        }
    }
}


/* 
 * DISTRIBUZIONE - CLIENT 
 */ 

// copia nella cartella dist/client tutti i file di interesse  

task copyClientJarFiles(type: Copy, dependsOn: subprojects.build) {
    clientSideProjects.collect {
        project(it) { subproject -> 
            from subproject.buildDir  
            include 'libs/**'
        }
        into 'dist/client'
    }
}

// copia nella cartella dist/client/libs i file jar delle librerie di interesse  
task copyClientLibFiles(type: Copy) {
    clientSideProjects.collect {
        project(it) { subproject -> 
            from subproject.configurations.libs  
            include '**'
        }
        into 'dist/client/libs'
    }
}

task copyClientScripts(type: Copy) {
    from 'scripts/client' 
    into 'dist/client'
    rename { String fileName ->
        fileName.replace('-TEMPLATE', '')
    }
    filter { String line -> 
        line.replace('@@@APPNAME@@@', appName)
    }
}

task copyClientResources(type: Copy) {
    from 'resources/client' 
    into 'dist/client'
}

task clientDist(dependsOn: [copyClientJarFiles, copyClientLibFiles, copyClientScripts, copyClientResources]) {
}


/* 
 * DISTRIBUZIONE e BUILD 
 */ 

task dist(dependsOn: [clientDist]) {
}

task build(dependsOn: dist) {
}


/*
 * CLEAN 
 * necessario perché il progetto principale non è un progetto Java 
 */ 

task deleteDist(type: Delete) {
    def dirName = "dist"
    delete dirName
}

task cleanWsImport(type: Delete) {
    def dirName = "generated-ws-client"
    delete dirName
}

task clean(dependsOn: [deleteDist, cleanWsImport]) {
}

